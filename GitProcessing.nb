(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 12.1' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[     26989,        535]
NotebookOptionsPosition[     25816,        505]
NotebookOutlinePosition[     26249,        522]
CellTagsIndexPosition[     26206,        519]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell[BoxData[
 RowBox[{"$Git$Repository", " ", "=", " ", 
  RowBox[{
  "GitOpen", "[", "\"\<U:\\\\Documents\\\\GitHub\\\\MathematicaWolfram\>\"", 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.8000866836300335`*^9, 3.8000867399201145`*^9}},
 CellLabel->"In[11]:=",ExpressionUUID->"094d72ae-752c-4351-a36c-9d528764834f"],

Cell[BoxData[
 TemplateBox[{
   RowBox[{"\[LeftAssociation]", 
     RowBox[{
       RowBox[{"\"BareQ\"", "\[Rule]", "False"}], ",", 
       RowBox[{
        "\"GitDirectory\"", "\[Rule]", 
         "\"\\\\\\\\crfs1.cr.uni-frankfurt.de\\\\bmlshomes\\\\stelzer\\\\\
Documents\\\\GitHub\\\\MathematicaWolfram\\\\.git\\\\\""}], ",", 
       RowBox[{
        "\"WorkingDirectory\"", "\[Rule]", 
         "\"\\\\\\\\crfs1.cr.uni-frankfurt.de\\\\bmlshomes\\\\stelzer\\\\\
Documents\\\\GitHub\\\\MathematicaWolfram\\\\\""}]}], "\[RightAssociation]"}]},
  "GitRepo",
  DisplayFunction->(TooltipBox[
    PanelBox[
     GridBox[{{
        GraphicsBox[{
          EdgeForm[
           GrayLevel[0.5]], 
          GrayLevel[0.5], 
          Thickness[0.1], 
          LineBox[{{0, 0}, {5, 0}}], 
          LineBox[{{0, 0}, {5, -3}}], 
          GrayLevel[0.85], 
          DiskBox[{0, 0}, 1], 
          DiskBox[{5, 0}, 1], 
          RGBColor[0, 1, 0], 
          DiskBox[{5, -3}, 1]}, ImageSize -> 15], 
        "\"\\\\\\\\crfs1.cr.uni-frankfurt.de\\\\bmlshomes\\\\stelzer\\\\\
Documents\\\\GitHub\\\\MathematicaWolfram\\\\\""}}, 
      BaselinePosition -> {1, 2}], FrameMargins -> 5, BaselinePosition -> 
     Baseline], 
    "GitRepo[<|\"BareQ\" -> False, \"GitDirectory\" -> \
\"\\\\\\\\crfs1.cr.uni-frankfurt.de\\\\bmlshomes\\\\stelzer\\\\Documents\\\\\
GitHub\\\\MathematicaWolfram\\\\.git\\\\\", \"WorkingDirectory\" -> \
\"\\\\\\\\crfs1.cr.uni-frankfurt.de\\\\bmlshomes\\\\stelzer\\\\Documents\\\\\
GitHub\\\\MathematicaWolfram\\\\\"|>]"]& )]], "Output",
 CellChangeTimes->{3.8000867054250903`*^9, 3.800086742686984*^9},
 CellLabel->"Out[11]=",ExpressionUUID->"a7f814fb-0f1b-45ac-ab02-981ad4d0db70"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"GitClose", "@", "$GitRepo$LSFM"}]], "Input",
 CellChangeTimes->{{3.800087151023438*^9, 3.8000871610971746`*^9}},
 CellLabel->"In[19]:=",ExpressionUUID->"4bdb30ed-020a-41b7-9fbe-88fd8e96decf"],

Cell[BoxData[
 RowBox[{"GitClose", "[", "$Failed", "]"}]], "Output",
 CellChangeTimes->{3.800087164033723*^9},
 CellLabel->"Out[19]=",ExpressionUUID->"469a87e4-49b9-4940-9f4d-4ed2e899d370"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"$GitRepo$LSFM", " ", "=", " ", 
  RowBox[{"GitInit", "[", 
   RowBox[{"\"\<U:\\\\Documents\\\\GitHub\\\\MathematicaLSFM\>\"", ",", " ", 
    RowBox[{"\"\<Description\>\"", "\[Rule]", "True"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.8000866836300335`*^9, 3.8000867399201145`*^9}, {
  3.8000867861435833`*^9, 3.800086840151849*^9}, {3.800087082697012*^9, 
  3.8000871152314587`*^9}, {3.8000871848508797`*^9, 3.800087187327903*^9}},
 CellLabel->"In[23]:=",ExpressionUUID->"bacf62ac-1d2a-4953-b6b3-0552264a6e30"],

Cell[BoxData[
 TemplateBox[{
   RowBox[{"\[LeftAssociation]", 
     RowBox[{
       RowBox[{"\"BareQ\"", "\[Rule]", "False"}], ",", 
       RowBox[{
        "\"GitDirectory\"", "\[Rule]", 
         "\"U:\\\\Documents\\\\GitHub\\\\MathematicaLSFM\\\\.git\\\\\""}], 
       ",", 
       RowBox[{
        "\"WorkingDirectory\"", "\[Rule]", 
         "\"U:\\\\Documents\\\\GitHub\\\\MathematicaLSFM\\\\\""}]}], 
     "\[RightAssociation]"}]},
  "GitRepo",
  DisplayFunction->(TooltipBox[
    PanelBox[
     GridBox[{{
        GraphicsBox[{
          EdgeForm[
           GrayLevel[0.5]], 
          GrayLevel[0.5], 
          Thickness[0.1], 
          LineBox[{{0, 0}, {5, 0}}], 
          LineBox[{{0, 0}, {5, -3}}], 
          GrayLevel[0.85], 
          DiskBox[{0, 0}, 1], 
          DiskBox[{5, 0}, 1], 
          RGBColor[0, 1, 0], 
          DiskBox[{5, -3}, 1]}, ImageSize -> 15], 
        "\"U:\\\\Documents\\\\GitHub\\\\MathematicaLSFM\\\\\""}}, 
      BaselinePosition -> {1, 2}], FrameMargins -> 5, BaselinePosition -> 
     Baseline], 
    "GitRepo[<|\"BareQ\" -> False, \"GitDirectory\" -> \
\"U:\\\\Documents\\\\GitHub\\\\MathematicaLSFM\\\\.git\\\\\", \
\"WorkingDirectory\" -> \
\"U:\\\\Documents\\\\GitHub\\\\MathematicaLSFM\\\\\"|>]"]& )]], "Output",
 CellChangeTimes->{
  3.8000868436702414`*^9, 3.800087116769685*^9, {3.800087176579134*^9, 
   3.800087215868207*^9}},
 CellLabel->"Out[23]=",ExpressionUUID->"abf0a7b7-160d-4452-8ce9-3055e28b3f0d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"GitProperties", "[", "$GitRepo$LSFM", "]"}], "//", 
  "Dataset"}]], "Input",
 CellChangeTimes->{{3.8000869034757614`*^9, 3.8000869226314325`*^9}, {
  3.800086970680008*^9, 3.8000870256425076`*^9}},
 CellLabel->"In[22]:=",ExpressionUUID->"84251a8c-c705-4a7d-beb1-51fd2118cedd"],

Cell[BoxData[
 TagBox[
  TagBox[
   DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
    Association[
    "InitialData" -> GitLink`GitProperties[$Failed], "InitialShape" -> 
     TypeSystem`PackageScope`AtomShape[10], "InitialType" -> 
     TypeSystem`AnyType, "Meta" -> Association["ID" -> 206089913302459], 
     "RowTarget" -> 20, "ColumnTarget" -> 10, "Shape" -> 
     TypeSystem`PackageScope`AtomShape[10], "Type" -> TypeSystem`AnyType, 
     "Path" -> {}, "BaseIndices" -> {}, "DisplayedRowCount" -> 20, 
     "DisplayedColumnCount" -> 10, "DataRowCount" -> 1, "DataColumnCount" -> 
     1, "SortPaths" -> {}, "SortDirections" -> {}, "HiddenItemsMap" -> Null, 
     "UpdateType" -> 1], TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
    DynamicModule[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
        Style[
         Grid[{{
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 RowBox[{"GitProperties", "[", "$Failed", "]"}], FontFamily -> 
                 "Source Code Pro", ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{}, "Item",
                 False], "Mouse"], ImageSize -> {{10, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}}, 
          BaseStyle -> {
           ContextMenu -> 
            Dynamic[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
              Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                 TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu, True, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger = 
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                 Block[{TypeSystem`NestedGrid`PackagePrivate`$globalScrollPos = \
{TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                   
                   With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    StringJoin["Show ", 
                    Which[
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    ToString[
                    ReplaceAll[
                    Last[TypeSystem`NestedGrid`PackagePrivate`lastPath$], Key[
                    Pattern[TypeSystem`NestedGrid`PackagePrivate`x, 
                    Blank[]]] :> TypeSystem`NestedGrid`PackagePrivate`x]], 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""]], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    StringJoin["Hide ", 
                    Which[
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    ToString[
                    ReplaceAll[
                    Last[TypeSystem`NestedGrid`PackagePrivate`lastPath$], Key[
                    Pattern[TypeSystem`NestedGrid`PackagePrivate`x, 
                    Blank[]]] :> TypeSystem`NestedGrid`PackagePrivate`x]], 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""]], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic]}]]]]], FontFamily -> 
            "Verdana", FontSize -> 12}, Spacings -> {0, 0}, Alignment -> Left,
           Dividers -> All, FrameStyle -> GrayLevel[0.7490196078431373], 
          BaseStyle -> {FontFamily -> "Verdana", FontSize -> 12}], 
         LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> False, 
         ShowAutoStyles -> False]], 
      TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
     Dynamic[
      TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
         Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
         Module[{
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
           TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
           TypeSystem`NestedGrid`PackagePrivate`datasetData[
            TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
             TypeSystem`NestedGrid`PackagePrivate`renderGrid[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
            Not[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
       TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
         FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
         TypeSystem`SparseGrid[
          TypeSystem`H["(data no longer present)"]], 
         If[GeneralUtilities`$DebugMode, 
          Row[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid, "  ", 
            TypeSystem`NestedGrid`PackagePrivate`formatState[
            TypeSystem`NestedGrid`PackagePrivate`$state$$, 
             TypeSystem`NestedGrid`PackagePrivate`$path$$, 
             TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
             TypeSystem`NestedGrid`PackagePrivate`$hPos$$]}], 
          TypeSystem`NestedGrid`PackagePrivate`renderedGrid]]], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
     DynamicModuleValues :> {}], 
    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
     TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
      TypeSystem`PackageScope`SubViewPathbar[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, 
       TypeSystem`NestedGrid`PackagePrivate`updateState[
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
        TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
        TypeSystem`NestedGrid`PackagePrivate`localHold[
        TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
     TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
     Framed[
      Dynamic[
       Replace[
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
        TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
           Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
           Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
            Blank[]]] :> (
          Increment[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
           TypeSystem`NestedGrid`PackagePrivate`path$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
           TypeSystem`NestedGrid`PackagePrivate`pathType$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
           TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
           TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
          TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
           TypeSystem`NestedGrid`PackagePrivate`path$, 
            TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
         Spacer[10], Blank[] :> Spacer[10]}], 
       TrackedSymbols :> {
        TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], FrameStyle -> 
      None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> Top, 
      ImageSize -> {Automatic, 15}], FontSize -> 1], 
    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
    DynamicWrapperBox[
     DynamicBox[ToBoxes[
       Dataset`DatasetContent[
       1, "Path" -> TypeSystem`NestedGrid`PackagePrivate`$path$$, "Grid" -> 
        TypeSystem`NestedGrid`PackagePrivate`releaseLocalHold[
         TypeSystem`NestedGrid`PackagePrivate`$grid$$], "State" -> 
        TypeSystem`NestedGrid`PackagePrivate`$state$$, "VPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], "TopBar" -> 
        TypeSystem`NestedGrid`PackagePrivate`$topBar$$, "BottomBar" -> 
        TypeSystem`NestedGrid`PackagePrivate`releaseLocalHold[
         TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]], StandardForm],
      ImageSizeCache->{289., {43., 52.}},
      TrackedSymbols:>{
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
     MouseAnnotation[],
     ImageSizeCache->{289., {43., 52.}}],
    BaseStyle->{LineBreakWithin -> False},
    DynamicModuleValues:>{},
    Initialization:>
     Block[{$ContextPath = $ContextPath}, Needs["TypeSystem`"]; 
      Needs["Dataset`"]; 
      TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = CreateUUID[]],
    UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Dataset`InterpretDataset[1],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.800086910737112*^9, 3.8000869249896593`*^9}, {
   3.800086991143052*^9, 3.8000870275278234`*^9}, 3.800087194610633*^9},
 CellLabel->"Out[22]=",ExpressionUUID->"5bf6ae72-b3c1-4167-a7cd-ccb3d8925be4"]
}, Open  ]]
},
WindowSize->{1069, 979},
WindowMargins->{{951, Automatic}, {189, Automatic}},
Magnification:>1.25 Inherited,
FrontEndVersion->"12.1 for Microsoft Windows (64-bit) (March 18, 2020)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"4ddf7278-d615-4500-b067-f45eb5230fef"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 317, 6, 44, "Input",ExpressionUUID->"094d72ae-752c-4351-a36c-9d528764834f"],
Cell[900, 30, 1695, 39, 78, "Output",ExpressionUUID->"a7f814fb-0f1b-45ac-ab02-981ad4d0db70"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2632, 74, 215, 3, 44, "Input",ExpressionUUID->"4bdb30ed-020a-41b7-9fbe-88fd8e96decf"],
Cell[2850, 79, 189, 3, 50, "Output",ExpressionUUID->"469a87e4-49b9-4940-9f4d-4ed2e899d370"]
}, Open  ]],
Cell[CellGroupData[{
Cell[3076, 87, 536, 8, 74, "Input",ExpressionUUID->"bacf62ac-1d2a-4953-b6b3-0552264a6e30"],
Cell[3615, 97, 1464, 39, 78, "Output",ExpressionUUID->"abf0a7b7-160d-4452-8ce9-3055e28b3f0d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[5116, 141, 311, 6, 44, "Input",ExpressionUUID->"84251a8c-c705-4a7d-beb1-51fd2118cedd"],
Cell[5430, 149, 20370, 353, 124, "Output",ExpressionUUID->"5bf6ae72-b3c1-4167-a7cd-ccb3d8925be4"]
}, Open  ]]
}
]
*)

(* End of internal cache information *)

